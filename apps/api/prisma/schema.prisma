generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(cuid())
  name   String
  email  String  @unique
  role   String
  locale String? @default("es")
  active Boolean @default(true)
  teams  TeamMember[]
  leads  Lead[]   @relation("LeadOwner")
  assignedConversations Conversation[] @relation("ConversationAssigned")
  auditLogs             AuditLog[]
}

model Team {
  id      String        @id @default(cuid())
  name    String
  members TeamMember[]
}

model TeamMember {
  userId String
  teamId String
  user   User @relation(fields: [userId], references: [id])
  team   Team @relation(fields: [teamId], references: [id])
  @@id([userId, teamId])
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  phone_e164 String   @unique
  email      String?
  locale     String?
  country    String?
  timezone   String?
  tags       String[]
  consent    Json?
  leads      Lead[]
  conversations Conversation[]
  consentLogs ConsentLog[]
}

model Lead {
  id         String   @id @default(cuid())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  String
  owner      User?    @relation("LeadOwner", fields: [ownerId], references: [id])
  ownerId    String?
  source     String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId String?
  status     String
  score      Int? @default(0)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Conversation {
  id            String   @id @default(cuid())
  contact       Contact  @relation(fields: [contactId], references: [id])
  contactId     String
  channel       String
  assignedTo    User?    @relation("ConversationAssigned", fields: [assignedToId], references: [id])
  assignedToId  String?
  status        String   @default("open")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  messages      Message[]
}

model Message {
  id             String   @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  direction      String
  channel        String
  body           String
  body_original  String?
  lang_src       String?
  lang_dest      String?
  template       Template? @relation(fields: [templateId], references: [id])
  templateId     String?
  mediaUrl       String?
  status         String
  errorCode      String?
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Template {
  id         String   @id @default(cuid())
  name       String
  channel    String
  locale     String
  content    String
  variables  String[]
  version    Int      @default(1)
  isApproved Boolean  @default(false)
  messages   Message[]
  campaigns  Campaign[]
}

model Campaign {
  id           String   @id @default(cuid())
  name         String
  status       String
  segmentQuery Json?
  template     Template? @relation(fields: [templateId], references: [id])
  templateId   String?
  scheduleAt   DateTime?
  stats        Json?
  leads        Lead[]
}

model Automation {
  id       String  @id @default(cuid())
  name     String
  trigger  Json
  actions  Json
  isActive Boolean @default(true)
}

model KnowledgeArticle {
  id          String   @id @default(cuid())
  title       String
  body        String
  locale      String
  tags        String[]
  version     Int      @default(1)
  publishedAt DateTime?
}

model ConsentLog {
  id        String   @id @default(cuid())
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String
  scope     String
  channel   String
  grantedAt DateTime
  revokedAt DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  entity    String
  entityId  String
  action    String
  diff      Json?
  ip        String?
  createdAt DateTime @default(now())
}
